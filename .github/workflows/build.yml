name: Bygg og deploy

on:
  push:
    branches:
      - master    # Push events on master branch
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'LICENCE'
      - 'CODEOWNERS'

env:
  TZ: "Europe/Oslo"
  IMAGE_BASE: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV

      - name: Henter maven avhengigheter som er cachet
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9 # Use commit-sha1 instead of tag for security concerns
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Hent og start Oracle image
        id: oracle
        run: |
          echo "Henter og starter Oracle image"
          cd .oracle
          docker-compose up --quiet-pull > nohup.out 2>&1 &
          sh -c 'tail -n +0 -f nohup.out | { sed "/Disconnected/q" && kill $$; }' || true

      - name: Set build version
        run: |
          echo "BUILD_VERSION=$(date +%Y.%m.%d.%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build artifacts & deploy
        run: |
          echo "Building artifacts $BUILD_VERSION"
          mvn jacoco:prepare-agent install --quiet -e --batch-mode --settings .github/.m2/settings.xml -Dchangelist= -Dsha1=-${BUILD_VERSION} -Dfile.encoding=UTF-8 -Djacoco.destFile=$(pwd)/target/jacoco.exec -Pgithub
          echo "Build artifacts"
          echo "TAG=$(mvn help:evaluate --batch-mode --settings .github/.m2/settings.xml --file .flattened -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }} # MÃ¥ ha PAT pga avhengighet til private repo: legacy-avhengigheter og ft-kalkulus

      - name: Stopper og fjerner oracle image/container
        if: success()
        run: |
          docker stop oracle
          docker system prune -f

      - name: Bygg, tag og push Docker image
        run: |
          docker build --pull --tag ${IMAGE_BASE}:${TAG} --tag ${IMAGE_BASE}:latest .
          docker push ${IMAGE_BASE} --all-tags

      - name: Lukk gamle deployment-issues
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });

      -  name: Opprett deployment issue
         id: createdeployissue
         if: success()
         uses: actions/github-script@v5
         with:
           github-token: ${{secrets.GITHUB_TOKEN}}
           script: |
               github.rest.issues.create( {
                 owner: context.issue.owner,
                 repo: context.issue.repo,
                 labels: ['deployment'],
                 title: 'Deploy av ${{ env.TAG }}'})
               .then(response => {
                       core.setOutput('number', response.data.number);
                });

      - uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.FP_PRIVATE_KEY }}
          app-id: ${{ secrets.FP_APP_ID }}

      - name: Trigger tester for FP
        run: |
          curl -XPOST -u "x-access-token:${{ steps.get-token.outputs.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/navikt/fpsak-autotest/actions/workflows/trigger.yml/dispatches \
          -d '{"ref":"master",
                  "inputs":{
                      "trigger": "${{ github.repository }}",
                      "version": "${{ env.TAG }}",
                      "issue_number": "${{ steps.createdeployissue.outputs.number }}"
                  }}'
