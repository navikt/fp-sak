name: Bygg og deploy

on:
  push:
    branches:
      - master    # Push events on master branch
env:
  IMAGE_BASE: docker.pkg.github.com/${{ github.repository }}/fpsak
  TZ: "Europe/Oslo"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Brukes ukenummer i cache_key da pomene endrer seg alt for ofte.
      # Alternative key med cache fra forrige uke som blir lagret etterpå under CACHE_KEY.
      - name: Set cache key
        run: |
          echo "CACHE_KEY=$(expr $(date +%V) - 1 + 1)" >> $GITHUB_ENV
          echo "PREVIOUS_CACHE_KEY=$(expr $(date +%V) - 1)" >> $GITHUB_ENV
      - name: Henter maven avhengigheter som er cachet
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.PREVIOUS_CACHE_KEY }}

      - uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Hent og start Oracle image
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        id: oracle
        shell: bash
        run: |
          echo  $GITHUB_TOKEN | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          echo "Henter og starter Oracle image"
          cd oracle
          docker-compose up --quiet-pull > nohup.out 2>&1 &
          sh -c 'tail -n +0 -f nohup.out | { sed "/Disconnected/q" && kill $$; }' || true

      - name: Set build version
        run: |
          echo "BUILD_VERSION=$(date +%Y.%m.%d.%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build artifacts & deploy
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          echo "Building artifacts $BUILD_VERSION"
          mvn jacoco:prepare-agent install --quiet -e --batch-mode --settings ./.m2/settings.xml -Dchangelist= -Dsha1=-${BUILD_VERSION} -Dfile.encoding=UTF-8 -Djacoco.destFile=$(pwd)/target/jacoco.exec -Pgithub
          echo "Build artifacts"
          echo "TAG=$(mvn help:evaluate --batch-mode --settings ./.m2/settings.xml --file .flattened -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Stopper og fjerner oracle image/container
        if: success()
        run: |
          docker stop oracle
          docker system prune -f

      - name: Bygg og push docker-image for distribuering
        if: success()
        uses: whoan/docker-build-with-cache-action@v5.7.0
        with:
          username: x-access-token
          password: ${{ secrets.GH_ACCESS_TOKEN }}
          image_name: ${{ github.repository }}/fpsak
          image_tag: ${{ env.TAG }},latest
          push_git_tag: true
          registry: docker.pkg.github.com

      - name: Opprett deployment issue
        if: success()
        uses: maxkomarychev/oction-create-issue@v0.7.1
        id: createdeployissue
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Deploy av ${{ env.TAG }}
          labels: deployment
          body: |
            Kommenter med <b>/promote dev-fss</b> eller <b>/promote prod-fss</b>, evt andre gyldige clusternavn.

      - name: Trigger fpsak-autotest til å kjøre tester
        if: success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          repository: navikt/fpsak-autotest
          event-type: fpsak-autotest
          client-payload: '{ "trigger": "${{ github.repository }}", "version": "${{ env.TAG }}", "issue-number": "${{ steps.createdeployissue.outputs.number }}" }'

      - name: Lukk gamle deployment-issues
        if: success()
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                if (issue.number != ${{ steps.createdeployissue.outputs.number }}) {
                  github.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  });
                }
              });
            });
